{% extends "base.html.twig" %}

{% block title %}Report{% endblock %}

{% block main %}
    <h1>Report</h1>
    <div class="report-container">
        <div class="links-column">
            <ul>
                <li><a href="#kmom01">Kmom01</a></li>
                <li><a href="#kmom02">Kmom02</a></li>
                <li><a href="#kmom03">Kmom03</a></li>
                <li><a href="#kmom04">Kmom04</a></li>
                <li><a href="#kmom05">Kmom05</a></li>
                <li><a href="#kmom06">Kmom06</a></li>
                <li><a href="#kmom07">Kmom07</a></li>
            </ul>
        </div>
        <div class="content-column">
            <h2 id="kmom01">Kmom01</h2>
            <p>Rapport för kmom01.</p>
            <p>Jag har tidigare sett (och lite smått testat på) objektorienterad programmering i C# och python, så logiken är inte helt ny för mig även om det var ett tag sedan jag jobbat med det. Förrutom det lilla vi stött på i tidigare kurser är objektorientering i PHP helt nytt för mig så det blir kul att lära sig det mer djupgående i ett annat språk.
            </p>
            <p>
                Klasser definierar olika properties och metoder som ett objekt av en klass har. Objektet är en "instans" av en klass, properties är individuellt för varje objekt medans metoder delas av alla objekt tillhörande en klass. 
                Man kan se det som en wrapper för en kollektion av olika funktioner och variablar.<br>
                Variablar har olika visibility, det finns public (kan användas utanför klassen), protected (kan endas användas inom klassen och dess subklasser) och private (kan endast användas inom klassen). 
                För grunderna kan det även vara bra att ha koll på inheritance som gör att man kan ärva properties och metoder från andra klasser samt constructors som "initierar" object properties eller gör olika setup tasks som behövs när man skapar ett objekt.
            </p>
            <p>
                För me/report-uppgiften börjar vi med model-view-controller upplägget. Vi bygger en webbplats med controller som hanterar olika routes och händelser och använder vyer för att rendera webbsidorna med base.html.twig some base template. <br> 
                Vi använder App\Controller som namespace där vi skapar klasser och objekt för olika routes, Encore hanterar asset management och Composer används för Dependency management. För mitt specifika upplägg har jag en ReportSiteJson.php controller för att inkapsla Json "endpoints" separat från ReportSite.php<br>
            </p>
            <p>
                I artikeln “PHP The Right Way” tycker jag att några mer värdefulla delar är:<br>
                Code Style Guide - Att ha en konsekvent kod för läsbarhet<br>
                Dependency Management: Att använda dependencies för PHP<br>
                Coding Practices: Grunderna i att koda i PHP, date och time hantering, design patterns, att använda UTF-8 samt internationalization och lacalization.<br>
                Security - Att förstå best practices web application security, som t.ex password hashing och data filtering.<br>
                Dessa känns mest värdefulla för en nybörjare, men det skulle även vara intressant att lära sig mer om enhetstestning och databaser vilket jag tror vi kommer att lära oss mer av senare i kursen.
            </p>
            <p>Min TIL för detta kmom är hela MVC strukturen och Symfony samt en del om objektorientering i PHP, det var mycket nytt för mig men kul och lärorikt.  
            </p>
            <h2 id="kmom02">Kmom02</h2>
            <p>Rapport för kmom02.</p>
            <p>Arv gör att en klass kan ärva properties och metoder från en annan klass, det ger en "is a" relation mellan klasserna. 
            Detta gör att man lätt kan återanvända kod, subclasses kan även lägga till nya metoder och egenskaper. Arv används med "extends" i PHP.<br>
            Komposition är precis som det låter ett sätt att lägga ihop olika enklare objekt till ett större mer komplicerat i en "has a"-relation. Detta görs genom att skapa objekt av en klass inom en annan klass.<br>
            Interface definierar ett "kontrakt" för klasser, där man anger olika metoder som klasser måste återge. Det skapar ett gemensamt API och tillåter objekt av olika klasser att behandlas på samma sätt.<br>
            Trait är ett sätt för återanvänding av kod vid flera olika arv. De kapslar in metoder som kan återanvändas i olika klasser utan att använda traditionellt arv. Detta gör alltså att man kan använda funktionalitet i klasser oberoende av "hierarkin" i dess arv.<br>
            <p>
                För denna uppgift skapade jag 4 klasser:<br>
                - Card, som representerar ett kort med ett värde. Klassens metoder får ut värdet, en strängrepresentation samt en strängrepresentation som lämpar sig för API-svar. <br>
                - CardGraphic, som ärver från Card och har en metod för att få ut den grafiska representationen av ett kort.<br>
                - CardHand, som har en korthand och metoder för att lägga till kort, ta ut värden och värdet som sträng, detta i en såkallad Composition-relation.<br>
                - DeckOfCards, som genererar en kortlek med hjälp av Card-objekt, även detta en "has a"-relation.<br>
                Jag skapade routes för dessa i CardGameController och lade till routes för JSON-endpoints i ReportSiteJson.php.<br>
            <p>
            
            Konstruktorn initierar valuet av Card klassen, i CardGraphic används sedan $imagepath som har en array av sökvägar till bildfiler av korten i kortleken. getAsString tar ut sökvägen för kortets bild i strängformat.
            Kortleken genereras med DeckOfCards (och shufflas med shuffle($deck)). Den sparar sedan kortleken i sessionen som skrivs ut i vyerna.<br>
            I draw-routen tar drawCard och drawNumberCards sedan ut ett eller flera kort från kortleken som sparats i sessionen och skriver ut den och hur många kort som finns kvar i kortleken.<br>
            I deal-routen tar dealCards ett specifikt antal kort och delar ut till ett specifikt antal spelare, detta renderas också i vyerna. (Här gick jag senare tillbaka och satte lite av draw- och deal-logiken i CardHand-klassen istället för i controllers.)
            På ett liknande sätt har jag gjort för ReturnSiteJson.php där jag istället returnerar en JSON struktur, här tar jag istället för bara kortets värde och bild ut en specialiserad sträng för värde och färg/sviter ("[A♥]") via getForAPI-metoden i Card-klassen, detta bara för att det är enklare att se vilket kort det är.<br>
            För session gjorde jag en dump(session), delete Session tar sedan bort allt i sessionen med session->clear().
            Allting skrivs ut i vyerna i twigs där jag valt att göra en separat fil för sido-kolumnen med olika valbara länkar, dvs aktioner för spelet, som då inkluderas till varje sida. 

            </p>
            <p>Förbättringar:
            Jag fixade till koden igen lite innan deadline, bland annat gjorde jag så att DeckOfCards genereras med Card istället för CardGraphic då det kändes mer logiskt för resterande kod, samt gjorde vyerna "dummare" så att de bara använder $data från controllers. 
            Jag var lite osäker på hur man ville att uppgiften skulle visas på sidorna, för att uppfylla kravet om sidorna skickas allt till nya sidor (shuffle, deck osv) men jag kan tycka att det skulle vara mer logiskt att redirecta varje händelse till samma sida (som med pig_play). Detta går lätt att åtgärda men då kravet i uppgiften kändes vagt ville jag vara på den säkra sidan att allt uppfylls.<br>
            Då uppgiften inte krävde det sparade jag inte de korten som dragits i session utan bara i en temporär array, men detta hade varit en enkel förbättring att göra om man sedan vill utveckla programmet. 
            Då kravet i punkt 12 sa att "när man gör card/deck/shuffle så kan kortleken återställas" gjorde jag så att shuffle alltid skapar en ny shufflad kortlek, här kan man kanske tänka att den kan ta tillbaka korten i kortleken och shuffla istället, men då allting ger samma resultat tolkade jag det som att det inte spelar någon roll.  
            Tillsist skulle nog koden kunna optimeras ännu mer (dela upp koden och göra den mer cohesive) och ha lite mer felhantering.
            </p>
            <p>
                Jag tycker att det varit kul om än lite svårt att jobba med symfony och MVC.<br>
                Som jag förstår är det mycket för att separera allting bättre, med modeller som hanterar datalogik, vyer som visar allt för användare och kontroller som hanterar interaktionen mellan de två. Denna struktur gör koden mer organiserad och lättare att hålla koll på, men jag tycker ibland att det är svårt att bestämma var viss logik ska finnas i klassernas relation till varandra och vad som är bäst att göra i olika situationer.  Förhoppningsvis är detta något jag blir mer säker på desto mer man jobbar med det.
            </p>
            <p>TIL för detta moment är, förrutom allt nytt jag lärt mig, att fokusera på det viktiga. Nu när jag var "klar" med uppgiften satt jag alldeles för länge med layout och att få till formulär för att dynamiskt kunna välja antal kort/spelare, jag borde hellre ha tagit den tiden till att läsa på mer om saker jag är mer osäker på.
            </p>

            <h2 id="kmom03">Kmom03</h2>
            <p>Rapport för kmom03.</p>
            <p>Det har varit kul och lärorikt att modellera ett kortspel med flödesdiagram och psuedokod. Jag har sällan skrivit ned kompletta flödesdiagram tidigare men har ofta försökt tänkta i de banorna när jag programmerat då det hjälper till med problemlösning och ger en bättre överblick av projekt, så det kändes logiskt och gick ganska bra. <br> Jag har aldrig skrivit pseudo-kod tidigare och är lite osäker på vad för sorts pseudo-kod som är bäst, men jag tycker det gick ganska bra och hjälpte till med strukturen till applikationen.

            <p>För uppgiften gjorde jag ett blackjack spel (en variant av 21). BlackJackController hanterar spelets flöde; först startas ett spel där spelaren och banken/dealern har 100 i pengar. En ny kortlek blandas, spelaren lägger ett bet utifrån ett formulär och korten blandas. Sedan utförs händelser utifrån spelarkortens värden och spelarens aktioner (hit, stand).</p>

            I klassen GameResultChecking finns metoder med case och if-satser som kollar om värden ger blackjack, bust eller att bedöma det högsta värdet. Eftersom ace kan vara både 1 och 11 skriver jag ut både en "low" och en "high" score som värden kollas utifrån. I klassen MoneyHandling hanteras ändringar av spelarens respektive dealerns pengar baserat på spelets resultat.<br>

            Jag skapade även en "gamelog" som skriver ut vad som händer i spelet, detta både för att göra det enklare för mig under utvecklandet av spelet och för att det är enklare för spelaren att se vad som händer.<br>
            Jag höll mina vyer/templates "dumma", med kod som endast hämtas ut från $data i controllers. För att få lite bättre användarvänlighet strukturerade jag upp stylingen i ett css-grid, gjorde lite if-satser som disablar vissa knappar/aktioner utifrån spelresultat samt skapade en liten delay av dealerns kortutdelning med hjälp av js och setTimeout som jag tycker höjde spelupplevelsen. 
            </p>

            <p>Jag är någorlunda nöjd med spelet då allting fungerar som det ska och jag är nöjd över att jag efter lite trixande lyckades få till det så att 0 problem kommenteras när jag kör composer lint. <br>Jag är dock missnöjd över att jag inte hann göra de sista valfria uppgifterna då familjeproblem uppstod under andra veckan, men jag hade påbörjat arbetet med en smart bank och förhoppningsvis ska jag kunna implementera något liknande till framtida uppgifter om det behövs. 
            För övrig förbättringspotential kan jag tänka mig att man borde göra controllers ännu mer skinny och lägga in mer av koden i models - dock är koden fortfarande såpass skinny att det inte känns helt nödvändigt ännu.<br>

            Hittils går det bra att koda i ett ramverk som Symfony, det gör det lättare att hantera routes, sessioner och att rendera templates. Jag tyckte överlag att det kändes krångligt i början men nu under kmom03 känns det verkligen som att allting "satt" sig.</p>

            <p>TIL för detta moment är att cleara cachen oftare! Jag slog huvudet blodig mot problem 2 gånger under uppgiften men dessa problem löstes automatiskt när jag kom på att cleara den.  
            </p>

            <h2 id="kmom04">Kmom04</h2>
            <p>Rapport för kmom04.</p>

            <p>Att skriva kod som testar annan kod med PHPUnit har varit kul och lärorikt. Jag insåg snabbt hur värdefullt det är då jag genom detta upptäckte ett litet logiskt fel i koden jag hade skrivit.</p>
            <p>Det gick bra att systematiskt gå igenom och "verifiera" att koden beter sig som förväntat under olika scenarion, det svåraste var kanske mer att veta vilka scenarion som kan uppstå och därför behövs testas. PHPUnit verkar rent generellt vara ett bra test-ramverk med god dokumentation som hjälper en att göra omfattande tester så min upplevelse med detta har hittills bara varit positiv.</p>
            <p>Jag tyckte från början att det kändes lite överkurs att skriva dockblock-kommentarer på klasserna men förstår även där varför det är nyttigt då jag (eller någon annan) ska kunna komma tillbaka till koden i framtiden och enkelt kunna förstå vad den gör.</p>

            <p>Jag lyckades uppnå 100% kodtäckning för mina CardGame-klasser och blev mycket nöjd, hade jag haft mer tid tillhanda hade jag fortsatt testa mer av min controller men jag fick nöja mig med klasserna tillsvidare. Koden jag skrev till klasserna har redan till en början varit ganska modulär och därmed fungerat bra att testa men jag gissar att delar av controllers skulle kunna förbättras och göras mer testbar.</p>
            Som nämnt tidigare upptäckte jag genom testerna ett lite logiskt fel i en av metoderna i min "GameResultCheck"-klass där jag inte på ett bra sätt hade hanterat situationer där man har flera ess/aces (dvs där man kan göra om flera aces till 1 istället för 11 för att hålla sig under 21), så detta fick jag skriva om lite grann där jag initiellt räknar aces som 1 men använder en while-loop som kollar igenom antalet aces samt värdet på den högre totalen och ändrande värdet från 1 till 11 om möjligt.</p>

            <p>Kod är enklare att testa när den är välstrukturerad och modulär med mindre dependencies så jag tycker absolut att detta kan identifiera "snygg och ren kod" - Det ser helt enkelt till att koden är mer lättförståelig och lättanvänd.

            <p>TIL för detta moment är egentligen allt som har med testning att göra då jag inte gjort något liknande tidigare. Jag har lärt mig både hur och varför man gör enhetstestningar, hur det hjälper mig att se till att koden fungerar som förväntat och hur det upprätthåller kvalitén på koden. <br>Jag har även reflekterat lite över hur TDD programmering skulle fungera och kommer nog testa på detta i framtiden då jag ser mycket fördelar med hur detta håller koden enkel och "clean", hur man redan från början får det mer klargjort vad som behöver implementeras, hur man direkt får feedback vid fel och liknande.</p>

            <h2 id="kmom05">Kmom05</h2>
            <p>Rapport för kmom05.</p>
            
            <p>Det gick bra att arbeta igenom övningen med Symfony och Doctrine, den visade allting steg för steg så allting kändes enkelt. <br>Det enda som kändes lite klurigt inför uppgiften senare var att veta på förhand vilka field types som skulle behövas och om de skulle vara nullable - jag fick ändra detta senare men det gick bra att bara köra migration igen.

            <p>Att bygga applikationen gick bra, jag tillämpade bara delarna från övningen till den nya uppgiften med library, create, show all, delete etc och gjorde användargränsnittet enkelt och tydligt för att underlätta navigerandet.<br>
            För den optionella delen om att resetta databasen gjorde jag bara en snabb lösning där jag kör deleteAll på library repository och sedan sätter in orginal-datat, men detta är enbart en snabbfix som inte återställer autoincrement IDet.</p>

            <p>Att arbeta med ORM i CRUD-operationer gick bra, det var självklart lite klurigt när man vant sig vid att jobba direkt via SQL statements, men jag förstår fördelarna med att jobba via objektorienterade principer: Koden blir enkelare att förstå och underhålla, samt minskar behovet av att t.ex. behöva skriva repetitiv SQL-kod. Det gör även att koden blir "database-agnostic", dvs att man kan jobba i och byta mellan olika databaser utan att behöva ändra mycket av koden, samt att det reducerar risken för SQL-injections. <br>Att kunna arbeta med data från databaser som objekt bibehåller övriga OOP-principer och gör att man kan fokusera mer själva applikationen istället för databas-management, dvs att programmeraren inte behöver kunna särskilt mycket om SQL eller hur relationsdatabaser fungerar.<br>
            Jag tänker mig att ORM även blir extra föredelaktigt vid mer komplexa datamodeller och det vi gör just nu är kanske inte tillräckligt stora program för att riktigt se alla fördelar och eventuella nackdelar - om jag får gissa kan jag tänka mig att det eventuellt skulle bli svårare att använda ORM i situationer där större och mer komplexa SQL queries krävs.</p>

            <p>Överlag är min uppfattning om ORM positiv i och med de tidigare nämnda fördelarna.</p>
            <p>TIL för detta moment var egentligen allting med ORM att göra då jag inte arbetat med detta tidigare. Jag hade även lite problem när jag körde composer lint där den inte gillade att jag hade långa namn för migration versionerna, men då detta inte kändes viktigt satte jag dessa att exkluderas i phpmd.</p>
            
            <h2 id="kmom06">Kmom06</h2>
            <p>Rapport för kmom06.</p>
            
            <p>Att arbeta med phpmetrics var lärorikt, att få se allting mer visuellt gav en bra överblick över min kod. Jag tycker framförallt att det var intressant att se cyklomatisk komplexitet, coupling och maintainability samt att få specifika violations identifierade. <br>
            Att få se hur koden "trendade" över tid var kanske inte nödvändigt men en rolig detalj som fick mig att känna att jag faktiskt gjorde framsteg när jag fixade till koden. 
            </p>
            <p>Integreringen med Scrutinizer gick bra även om jag i början hade lite problem med composer som använde fel php-version, men det löste sig. Jag tycker att det var intressant att använda Scrutinizer, det var användarvänligt och likt phpmetrics ger det en större inblick i databasen och belyser olika problem, men en stor fördel är att det även ger förslag på hur koden kan förbättras. <br>
            Badges är ett snabbt sätt att visa upp kodkvalitet och gör att man snabbt kan visa upp det för andra för att säkerhetsställa kvalité.<br>
            Min kodkvalitet var "ok" till en början men hade många delar där jag kunde göra förbättringar medan min kodtäckning var väldigt låg.
            </p>
            <p>
            Kodkvalitet ser jag som ett bevis på just kvalitet: det kanske går att överleva med en dålig score men det bör undvikas då det kan leda till problem i framtiden.<br>
            Kodkvalitet ger bättre maintainability och läsbarhet för alla som använder koden och ger överlag bättre performance med mindre risk för buggar och andra issues.<br>
            Badges ger en bra startpunkt för att visa upp kodkvalitet och code coverage, men de har vissa begränsningar då den inte visar någonting om hur koden är uppbyggd. Best practice skulle nog vara att kombinera badges med kod dokumentation.<br>
            <br>
            TIL för detta kmom är allt som har med phpmetrics och scrutinizer att göra. Jag tyckte det tog tid att skriva tester och dela upp min kod för att få lägra komplexitet, men jag gissar och hoppas att detta kommer gå bättre i framtiden då jag kan börja utföra tester och göra förbättringar medan jag bygger koden och inte efter. 
            </p>
            <h2 id="kmom07">Kmom07</h2> 
            <p>Rapport för kmom07.</p>
        </div>
    </div>
{% endblock %}
