{% extends "base.html.twig" %}

{% block title %}Report{% endblock %}

{% block main %}
    <h1>Report</h1>
    <div class="report-container">
        <div class="links-column">
            <ul>
                <li><a href="#kmom01">Kmom01</a></li>
                <li><a href="#kmom02">Kmom02</a></li>
                <li><a href="#kmom03">Kmom03</a></li>
                <li><a href="#kmom04">Kmom04</a></li>
                <li><a href="#kmom05">Kmom05</a></li>
                <li><a href="#kmom06">Kmom06</a></li>
                <li><a href="#kmom07">Kmom07</a></li>
            </ul>
        </div>
        <div class="content-column">
            <h2 id="kmom01">Kmom01</h2>
            <p>Rapport för kmom01.</p>
            <p>Jag har tidigare sett (och lite smått testat på) objektorienterad programmering i C# och python, så logiken är inte helt ny för mig även om det var ett tag sedan jag jobbat med det. Förrutom det lilla vi stött på i tidigare kurser är objektorientering i PHP helt nytt för mig så det blir kul att lära sig det mer djupgående i ett annat språk.
            </p>
            <p>
                Klasser definierar olika properties och metoder som ett objekt av en klass har. Objektet är en "instans" av en klass, properties är individuellt för varje objekt medans metoder delas av alla objekt tillhörande en klass. 
                Man kan se det som en wrapper för en kollektion av olika funktioner och variablar.<br>
                Variablar har olika visibility, det finns public (kan användas utanför klassen), protected (kan endas användas inom klassen och dess subklasser) och private (kan endast användas inom klassen). 
                För grunderna kan det även vara bra att ha koll på inheritance som gör att man kan ärva properties och metoder från andra klasser samt constructors som "initierar" object properties eller gör olika setup tasks som behövs när man skapar ett objekt.
            </p>
            <p>
                För me/report-uppgiften börjar vi med model-view-controller upplägget. Vi bygger en webbplats med controller som hanterar olika routes och händelser och använder vyer för att rendera webbsidorna med base.html.twig some base template. <br> 
                Vi använder App\Controller som namespace där vi skapar klasser och objekt för olika routes, Encore hanterar asset management och Composer används för Dependency management. För mitt specifika upplägg har jag en ReportSiteJson.php controller för att inkapsla Json "endpoints" separat från ReportSite.php<br>
            </p>
            <p>
                I artikeln “PHP The Right Way” tycker jag att några mer värdefulla delar är:<br>
                Code Style Guide - Att ha en konsekvent kod för läsbarhet<br>
                Dependency Management: Att använda dependencies för PHP<br>
                Coding Practices: Grunderna i att koda i PHP, date och time hantering, design patterns, att använda UTF-8 samt internationalization och lacalization.<br>
                Security - Att förstå best practices web application security, som t.ex password hashing och data filtering.<br>
                Dessa känns mest värdefulla för en nybörjare, men det skulle även vara intressant att lära sig mer om enhetstestning och databaser vilket jag tror vi kommer att lära oss mer av senare i kursen.
            </p>
            <p>Min TIL för detta kmom är hela MVC strukturen och Symfony samt en del om objektorientering i PHP, det var mycket nytt för mig men kul och lärorikt.  
            </p>
            <h2 id="kmom02">Kmom02</h2>
            <p>Rapport för kmom02.</p>
            <h2 id="kmom03">Kmom03</h2>
            <p>Rapport för kmom03.</p>
            <h2 id="kmom04">Kmom04</h2>
            <p>Rapport för kmom04.</p>
            <h2 id="kmom05">Kmom05</h2>
            <p>Rapport för kmom05.</p>
            <h2 id="kmom06">Kmom06</h2>
            <p>Rapport för kmom06.</p>
            <h2 id="kmom07">Kmom07</h2> 
            <p>Rapport för kmom07.</p>
        </div>
    </div>
{% endblock %}
